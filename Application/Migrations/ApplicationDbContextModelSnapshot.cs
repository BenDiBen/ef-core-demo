// <auto-generated />
using System;
using EfCoreDemo.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EfCoreDemo.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EfCoreDemo.Domain.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("OverdraftLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Number");

                    b.HasIndex("CustomerId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("EfCoreDemo.Domain.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("EfCoreDemo.Domain.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CreditedAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreditorReference")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("DebitedAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DebtorReference")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Processed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Requested")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreditedAccountId");

                    b.HasIndex("DebitedAccountId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("EfCoreDemo.Domain.Account", b =>
                {
                    b.HasOne("EfCoreDemo.Domain.Customer", null)
                        .WithMany("Accounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EfCoreDemo.Domain.Customer", b =>
                {
                    b.OwnsOne("EfCoreDemo.Domain.Addresses", "Addresses", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");

                            b1.OwnsOne("EfCoreDemo.Domain.Address", "PostalInternal", b2 =>
                                {
                                    b2.Property<Guid>("AddressesCustomerId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("City")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)");

                                    b2.Property<string>("PostalCode")
                                        .IsRequired()
                                        .HasMaxLength(4)
                                        .HasColumnType("nvarchar(4)");

                                    b2.Property<string>("Province")
                                        .IsRequired()
                                        .HasMaxLength(20)
                                        .HasColumnType("nvarchar(20)");

                                    b2.Property<string>("Suburb")
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)");

                                    b2.HasKey("AddressesCustomerId");

                                    b2.ToTable("Customers");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressesCustomerId");

                                    b2.OwnsOne("EfCoreDemo.Domain.StreetDescription", "Street", b3 =>
                                        {
                                            b3.Property<Guid>("AddressesCustomerId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<string>("FirstLine")
                                                .IsRequired()
                                                .HasMaxLength(50)
                                                .HasColumnType("nvarchar(50)");

                                            b3.Property<string>("SecondLine")
                                                .HasMaxLength(50)
                                                .HasColumnType("nvarchar(50)");

                                            b3.HasKey("AddressesCustomerId");

                                            b3.ToTable("Customers");

                                            b3.WithOwner()
                                                .HasForeignKey("AddressesCustomerId");
                                        });

                                    b2.Navigation("Street")
                                        .IsRequired();
                                });

                            b1.OwnsOne("EfCoreDemo.Domain.Address", "Residential", b2 =>
                                {
                                    b2.Property<Guid>("AddressesCustomerId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("City")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)");

                                    b2.Property<string>("PostalCode")
                                        .IsRequired()
                                        .HasMaxLength(4)
                                        .HasColumnType("nvarchar(4)");

                                    b2.Property<string>("Province")
                                        .IsRequired()
                                        .HasMaxLength(20)
                                        .HasColumnType("nvarchar(20)");

                                    b2.Property<string>("Suburb")
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)");

                                    b2.HasKey("AddressesCustomerId");

                                    b2.ToTable("Customers");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressesCustomerId");

                                    b2.OwnsOne("EfCoreDemo.Domain.StreetDescription", "Street", b3 =>
                                        {
                                            b3.Property<Guid>("AddressesCustomerId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<string>("FirstLine")
                                                .IsRequired()
                                                .HasMaxLength(50)
                                                .HasColumnType("nvarchar(50)");

                                            b3.Property<string>("SecondLine")
                                                .HasMaxLength(50)
                                                .HasColumnType("nvarchar(50)");

                                            b3.HasKey("AddressesCustomerId");

                                            b3.ToTable("Customers");

                                            b3.WithOwner()
                                                .HasForeignKey("AddressesCustomerId");
                                        });

                                    b2.Navigation("Street")
                                        .IsRequired();
                                });

                            b1.Navigation("PostalInternal");

                            b1.Navigation("Residential")
                                .IsRequired();
                        });

                    b.OwnsOne("EfCoreDemo.Domain.ContactDetails", "ContactDetails", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AlternateNumber")
                                .HasMaxLength(12)
                                .HasColumnType("nvarchar(12)");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(12)
                                .HasColumnType("nvarchar(12)");

                            b1.Property<string>("WorkNumber")
                                .HasMaxLength(12)
                                .HasColumnType("nvarchar(12)");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.OwnsOne("EfCoreDemo.Domain.CustomerName", "Name", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("First")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Last")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("MiddleNames")
                                .HasMaxLength(250)
                                .HasColumnType("nvarchar(250)");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.OwnsOne("EfCoreDemo.Domain.DemographicInfo", "DemographicInfo", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateOnly>("DateOfBirth")
                                .HasColumnType("date");

                            b1.Property<string>("Gender")
                                .HasMaxLength(8)
                                .HasColumnType("nvarchar(8)");

                            b1.Property<string>("PreferredLanguage")
                                .HasMaxLength(2)
                                .HasColumnType("nvarchar(2)");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.OwnsOne("EfCoreDemo.Domain.MarketingPreferences", "MarketingPreferences", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("AcceptsMarketingEmails")
                                .HasColumnType("bit");

                            b1.Property<bool>("AcceptsSmsNotifications")
                                .HasColumnType("bit");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.Navigation("Addresses")
                        .IsRequired();

                    b.Navigation("ContactDetails")
                        .IsRequired();

                    b.Navigation("DemographicInfo")
                        .IsRequired();

                    b.Navigation("MarketingPreferences")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("EfCoreDemo.Domain.Transaction", b =>
                {
                    b.HasOne("EfCoreDemo.Domain.Account", "CreditedAccount")
                        .WithMany("CreditTransactions")
                        .HasForeignKey("CreditedAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EfCoreDemo.Domain.Account", "DebitedAccount")
                        .WithMany("DebitTransactions")
                        .HasForeignKey("DebitedAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreditedAccount");

                    b.Navigation("DebitedAccount");
                });

            modelBuilder.Entity("EfCoreDemo.Domain.Account", b =>
                {
                    b.Navigation("CreditTransactions");

                    b.Navigation("DebitTransactions");
                });

            modelBuilder.Entity("EfCoreDemo.Domain.Customer", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
